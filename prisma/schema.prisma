// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth & User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core User & Profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  portfolios    Portfolio[]
  applications  JobApplication[]
  reviews       Review[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  headline    String?
  bio         String?  @db.Text
  location    String?
  website     String?
  linkedin    String?
  github      String?
  skills      String[]
  experience  Json[]   // Structured experience data
  education   Json[]   // Structured education data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Portfolio & Resume Management
model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  isDefault   Boolean  @default(false)
  resumes     Resume[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
}

model Resume {
  id          String   @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  version     Int
  name        String
  content     Json     // Structured resume data
  rawText     String   @db.Text
  fileUrl     String?  // URL to stored file
  fileType    String   // PDF, DOCX, etc.
  isActive    Boolean  @default(true)
  analyses    ResumeAnalysis[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([portfolioId, version])
}

// Job Applications & Tracking
model JobApplication {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumeId    String?
  jobTitle    String
  company     String
  location    String?
  jobUrl      String?
  description String?  @db.Text
  status      String   // Applied, Interview, Offer, Rejected, etc.
  notes       String?  @db.Text
  appliedAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Analysis & AI Features
model ResumeAnalysis {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobTitle    String?
  jobDesc     String?  @db.Text
  score       Float?
  keywords    String[]
  missing     String[]
  suggestions Json?    // AI suggestions
  createdAt   DateTime @default(now())
}

// Community Features (Phase 3)
model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetType  String   // Resume, Profile, etc.
  targetId    String   // ID of the reviewed item
  rating      Int
  comment     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, targetType, targetId])
}